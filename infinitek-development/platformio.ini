; PlatformIO Project Configuration File
; ESP8266 / ESP32 devices with Web, MQTT and OTA firmware
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = ESP8266 / ESP32 Web, MQTT, OTA firmware
src_dir = Infinitek
lib_dir = lib/default
boards_dir = boards
build_cache_dir = .pio_cache
extra_configs = 
    platformio_Infinitek32.ini
    platformio_Infinitek_env.ini
    platformio_Infinitek_env32.ini
    platformio_override.ini
    platformio_Infinitek_cenv.ini

[common]
platform = espressif8266
platform_packages = 
framework = arduino
board = esp8266_1M
board_build.filesystem = littlefs
custom_unpack_dir = unpacked_littlefs
monitor_speed = 115200
monitor_echo = yes
upload_resetmethod = nodemcu
lib_ldf_mode = chain
lib_compat_mode = strict
shared_libdeps_dir = lib
build_unflags = 
build_flags = 
extra_scripts = 
lib_extra_dirs = 
    lib/lib_basic
    lib/lib_i2c
    lib/lib_display
    lib/lib_ssl
    lib/lib_audio
    lib/lib_rf
    lib/lib_div
lib_ignore = 
check_skip_packages = false
board_build.variants_dir = 

[scripts_defaults]
extra_scripts = 
    pre:pio-tools/pre_source_dir.py
    pre:pio-tools/set_partition_table.py
    pre:pio-tools/override_copy.py
    pre:pio-tools/compress-html.py
    pre:pio-tools/port-vsc.py
    post:pio-tools/strip-flags.py

[esp_defaults]
extra_scripts = 
    post:pio-tools/name-firmware.py
    post:pio-tools/gzip-firmware.py
    post:pio-tools/metrics-firmware.py
    pre:pio-tools/custom_target.py
    ${scripts_defaults.extra_scripts}
build_unflags = 
    -Wall
    -Wdeprecated-declarations
build_flags = 
    -DCORE_DEBUG_LEVEL=0
    -Wl,-Map,firmware.map
    -Wno-deprecated-declarations
    -mtarget-align
    -free
    -fipa-pta
    -Wreturn-type
    -DInfinitek
    -DUSE_CONFIG_OVERRIDE

[esp82xx_defaults]
extra_scripts = ${esp_defaults.extra_scripts}
build_flags = ${esp_defaults.build_flags}
    -DNDEBUG
    -DFP_IN_IROM
    -DBEARSSL_SSL_BASIC
    -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
    -DVTABLES_IN_FLASH
    -DPSTR_ALIGN=1
    -DMIMETYPE_MINIMAL
lib_ignore = 
    ESP8266Audio
    ESP8266SAM
    ESP8266LLMNR
    ESP8266NetBIOS
    ESP8266SSDP
    ESP8266WiFiMesh
    GDBStub
    ESP8266HTTPUpdateServer
    SPISlave
    Hash
    ArduinoOTA

[esp32_defaults]
build_unflags = ${esp_defaults.build_unflags}
    -mtarget-align
    -Wswitch-unreachable
    -Wstringop-overflow
    -Wincompatible-pointer-types
    -Wnonnull-compare
    -fexceptions
    -Wpointer-arith
build_flags = ${esp_defaults.build_flags}
    -DUSE_IPV6
    -mno-target-align
    -Wno-switch-unreachable
    -Wno-stringop-overflow
    -fno-exceptions
    -ffunction-sections
    -fdata-sections
    -Wl,--gc-sections
    -DBUFFER_LENGTH=128
    -DHTTP_UPLOAD_BUFLEN=2048
    -DMQTT_MAX_PACKET_SIZE=1200
    -Duint32=uint32_t
    -Duint16=uint16_t
    -Duint8=uint8_t
    -Dsint8_t=int8_t
    -Dsint32_t=int32_t
    -Dsint16_t=int16_t
    -Dmemcpy_P=memcpy
    -Dmemcmp_P=memcmp
    -DUSE_SHA_ROM
    -DUSE_4K_RSA
    -I$PROJECT_DIR/include
    -include "sdkconfig.h"
    -include "esp32x_fixes.h"
    -Wl,--wrap=panicHandler
    -Wl,--wrap=xt_unhandled_exception
    -Wl,--wrap=_Z11analogWritehi
    -Wl,--wrap=ledcReadFreq
    -Wl,--wrap=delay
lib_ignore = 
    HTTPUpdateServer
    USB
    NetBIOS
    Preferences
    ArduinoOTA
extra_scripts = 
    pre:pio-tools/add_c_flags.py
    pre:pio-tools/solidify-from-url.py
    pre:pio-tools/gen-berry-structures.py
    post:pio-tools/post_esp32.py
    ${esp_defaults.extra_scripts}
monitor_filters = esp32_exception_decoder

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
build_flags = ${esp32_defaults.build_flags}
monitor_speed = 115200

; ===========================
; Infinitek Base Environments
; ===========================
[env:Infinitek]
build_flags = ${common.build_flags} -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek.bin.gz"'
lib_deps = 
    adafruit/Adafruit Unified Sensor@^1.1.15
    adafruit/DHT sensor library@^1.4.6
    johboh/EspNowNetwork@^0.7.1

; Variants with OTA URLs
[env:Infinitek-4M]
extends = env:Infinitek
board = esp8266_4M2M
build_flags = ${env:Infinitek.build_flags} -DCODE_IMAGE_STR='"Infinitek-4M"' -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-4M.bin.gz"'

[env:Infinitek-minimal]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_MINIMAL -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-minimal.bin.gz"'
lib_extra_dirs = 

[env:Infinitek-lite]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_LITE -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-lite.bin.gz"'
lib_extra_dirs = 

[env:Infinitek-knx]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_KNX_NO_EMULATION -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-knx.bin.gz"'
lib_extra_dirs = lib/lib_basic, lib/lib_div

[env:Infinitek-sensors]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_SENSORS -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-sensors.bin.gz"'
lib_extra_dirs = lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div

[env:Infinitek-display]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_DISPLAYS -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-display.bin.gz"'
lib_extra_dirs = lib/lib_basic, lib/lib_display

[env:Infinitek-ir]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_IR -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-ir.bin.gz"'
lib_extra_dirs = lib/lib_basic

[env:Infinitek-zbbridge]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DFIRMWARE_ZBBRIDGE -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-zbbridge.bin.gz"'
board = esp8266_zbbridge
lib_extra_dirs = lib/lib_basic, lib/lib_ssl, lib/lib_div

; Language variants
[env:Infinitek-UK]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DMY_LANGUAGE=uk_UA -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-UK.bin.gz"'

[env:Infinitek-FR]
extends = env:Infinitek
build_flags = ${env:Infinitek.build_flags} -DMY_LANGUAGE=fr_FR -DOTA_URL='"http://ota.Infinitek.com/Infinitek/release/Infinitek-FR.bin.gz"'

; ... add other language-specific builds similarly ...

; ===========================
; ESP32 Base Environment
; ===========================
[env:Infinitek32_base]
extends = env:esp32dev
lib_extra_dirs = 
    lib/libesp32
    lib/libesp32_lvgl
lib_deps = 
    adafruit/Adafruit Unified Sensor@^1.1.15
    adafruit/DHT sensor library@^1.4.6
    johboh/EspNowNetwork@^0.7.1

[env:Infinitek32-safeboot]
extends = env:Infinitek32_base
build_flags = ${env:Infinitek32_base.build_flags} -DCUSTOM_SDKCONFIG='"sdkconfig_safeboot"' -DOTA_URL='"http://ota.Infinitek.com/Infinitek32/release/Infinitek32-safeboot.bin"'
lib_ignore = 
    BluetoothSerial
    USB
    ArduinoOTA
    Preferences

[env:Infinitek32-release]
extends = env:Infinitek32_base
build_flags = ${env:Infinitek32_base.build_flags} -DOTA_URL='"http://ota.Infinitek.com/Infinitek32/release/Infinitek32.bin"'
