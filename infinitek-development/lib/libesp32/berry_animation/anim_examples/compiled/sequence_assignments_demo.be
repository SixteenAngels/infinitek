# Generated Berry code from Animation DSL
# Source: sequence_assignments_demo.anim
# 
# This file was automatically generated by compile_all_examples.sh
# Do not edit manually - changes will be overwritten

import animation

# Sequence Assignments Demo
# Demonstrates dynamic property changes within sequences
# Set up strip length and value providers
# Auto-generated strip initialization (using Infinitek configuration)
var engine = animation.init_strip()

var strip_len_ = animation.strip_length(engine)
var triangle_val_ = (def (engine)
  var provider = animation.triangle(engine)
  provider.min_value = 0
  provider.max_value = animation.create_closure_value(engine, def (engine) return animation.resolve(strip_len_) - 2 end)
  provider.duration = 5000
  return provider
end)(engine)
var cosine_val_ = (def (engine)
  var provider = animation.cosine_osc(engine)
  provider.min_value = 0
  provider.max_value = animation.create_closure_value(engine, def (engine) return animation.resolve(strip_len_) - 2 end)
  provider.duration = 5000
  return provider
end)(engine)
var brightness_high_ = 255
var brightness_low_ = 64
# Create color palette and cycling color
var eye_palette_ = bytes("FFFF0000" "FFFFFF00" "FF008000" "FFEE82EE")
var eye_color_ = animation.color_cycle(engine)
eye_color_.palette = eye_palette_
eye_color_.cycle_period = 0
# Create animations
var red_eye_ = animation.beacon_animation(engine)
red_eye_.color = eye_color_
red_eye_.pos = cosine_val_
red_eye_.beacon_size = 3
red_eye_.slew_size = 2
red_eye_.priority = 10
var pulse_demo_ = animation.pulsating_animation(engine)
pulse_demo_.color = 0xFF0000FF
pulse_demo_.period = 2000
pulse_demo_.priority = 5
# Sequence 1: Cylon Eye with Position Changes
var cylon_eye_ = animation.SequenceManager(engine)
  .push_play_step(red_eye_, 3000)
  .push_closure_step(def (engine) red_eye_.pos = triangle_val_ end)  # Change to triangle oscillator
  .push_play_step(red_eye_, 3000)
  .push_closure_step(def (engine) red_eye_.pos = cosine_val_ end)  # Change back to cosine
  .push_closure_step(def (engine) eye_color_.next = 1 end)  # Advance to next color
  .push_play_step(red_eye_, 2000)
# Sequence 2: Brightness Control Demo
var brightness_demo_ = animation.SequenceManager(engine)
  .push_play_step(pulse_demo_, 2000)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_low_ end)  # Dim the animation
  .push_play_step(pulse_demo_, 2000)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_high_ end)  # Brighten again
  .push_play_step(pulse_demo_, 2000)
# Sequence 3: Multiple Property Changes
var multi_change_ = animation.SequenceManager(engine)
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.color = 0xFFFF0000 end)  # Change color
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_low_ end)  # And brightness
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.color = 0xFF008000 end)  # Change color again
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_high_ end)  # Full brightness
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.color = 0xFF0000FF end)  # Back to blue
# Sequence 4: Assignments in Repeat Blocks
var repeat_demo_ = animation.SequenceManager(engine)
  .push_repeat_subsequence(animation.SequenceManager(engine, 3)
    .push_play_step(red_eye_, 1000)
    .push_closure_step(def (engine) red_eye_.pos = triangle_val_ end)  # Change oscillator
    .push_play_step(red_eye_, 1000)
    .push_closure_step(def (engine) red_eye_.pos = cosine_val_ end)  # Change back
    .push_closure_step(def (engine) eye_color_.next = 1 end)  # Next color
    )
# Main demo sequence combining all examples
var main_demo_ = animation.SequenceManager(engine)
  # Run cylon eye demo
  .push_play_step(red_eye_, 1000)
  .push_wait_step(500)
  # Demonstrate position changes
  .push_closure_step(def (engine) red_eye_.pos = triangle_val_ end)
  .push_play_step(red_eye_, 2000)
  .push_closure_step(def (engine) red_eye_.pos = cosine_val_ end)
  .push_play_step(red_eye_, 2000)
  # Color cycling
  .push_closure_step(def (engine) eye_color_.next = 1 end)
  .push_play_step(red_eye_, 1000)
  .push_closure_step(def (engine) eye_color_.next = 1 end)
  .push_play_step(red_eye_, 1000)
  .push_wait_step(1000)
  # Brightness demo with pulse
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_low_ end)
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_high_ end)
  .push_play_step(pulse_demo_, 1000)
  # Multi-property changes
  .push_closure_step(def (engine) pulse_demo_.color = 0xFFFF0000 end)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_low_ end)
  .push_play_step(pulse_demo_, 1000)
  .push_closure_step(def (engine) pulse_demo_.color = 0xFF008000 end)
  .push_closure_step(def (engine) pulse_demo_.opacity = brightness_high_ end)
  .push_play_step(pulse_demo_, 1000)
# Run the main demo
engine.add(main_demo_)
engine.run()


#- Original DSL source:
# Sequence Assignments Demo
# Demonstrates dynamic property changes within sequences

# Set up strip length and value providers
set strip_len = strip_length()
set triangle_val = triangle(min_value=0, max_value=strip_len - 2, duration=5s)
set cosine_val = cosine_osc(min_value=0, max_value=strip_len - 2, duration=5s)
set brightness_high = 255
set brightness_low = 64

# Create color palette and cycling color
palette eye_palette = [red, yellow, green, violet]
color eye_color = color_cycle(palette=eye_palette, cycle_period=0)

# Create animations
animation red_eye = beacon_animation(
  color=eye_color
  pos=cosine_val
  beacon_size=3
  slew_size=2
  priority=10
)

animation pulse_demo = pulsating_animation(
  color=blue
  period=2s
  priority=5
)

# Sequence 1: Cylon Eye with Position Changes
sequence cylon_eye {
  play red_eye for 3s
  red_eye.pos = triangle_val        # Change to triangle oscillator
  play red_eye for 3s  
  red_eye.pos = cosine_val          # Change back to cosine
  eye_color.next = 1                # Advance to next color
  play red_eye for 2s
}

# Sequence 2: Brightness Control Demo
sequence brightness_demo {
  play pulse_demo for 2s
  pulse_demo.opacity = brightness_low    # Dim the animation
  play pulse_demo for 2s
  pulse_demo.opacity = brightness_high   # Brighten again
  play pulse_demo for 2s
}

# Sequence 3: Multiple Property Changes
sequence multi_change {
  play pulse_demo for 1s
  pulse_demo.color = red            # Change color
  pulse_demo.opacity = brightness_low    # And brightness
  play pulse_demo for 1s
  pulse_demo.color = green          # Change color again
  pulse_demo.opacity = brightness_high   # Full brightness
  play pulse_demo for 1s
  pulse_demo.color = blue           # Back to blue
}

# Sequence 4: Assignments in Repeat Blocks
sequence repeat_demo {
  repeat 3 times {
    play red_eye for 1s
    red_eye.pos = triangle_val      # Change oscillator
    play red_eye for 1s
    red_eye.pos = cosine_val        # Change back
    eye_color.next = 1              # Next color
  }
}

# Main demo sequence combining all examples
sequence main_demo {
  # Run cylon eye demo
  play red_eye for 1s
  wait 500ms
  
  # Demonstrate position changes
  red_eye.pos = triangle_val
  play red_eye for 2s
  red_eye.pos = cosine_val
  play red_eye for 2s
  
  # Color cycling
  eye_color.next = 1
  play red_eye for 1s
  eye_color.next = 1
  play red_eye for 1s
  
  wait 1s
  
  # Brightness demo with pulse
  play pulse_demo for 1s
  pulse_demo.opacity = brightness_low
  play pulse_demo for 1s
  pulse_demo.opacity = brightness_high
  play pulse_demo for 1s
  
  # Multi-property changes
  pulse_demo.color = red
  pulse_demo.opacity = brightness_low
  play pulse_demo for 1s
  pulse_demo.color = green
  pulse_demo.opacity = brightness_high
  play pulse_demo for 1s
}

# Run the main demo
run main_demo
-#
