# Generated Berry code from Animation DSL
# Source: computed_values_demo.anim
# 
# This file was automatically generated by compile_all_examples.sh
# Do not edit manually - changes will be overwritten

import animation

# Computed Values Demo - Example from the original request
# Shows how to use computed values from value providers
# Get the current strip length
# Auto-generated strip initialization (using Infinitek configuration)
var engine = animation.init_strip()

var strip_len_ = animation.strip_length(engine)
# Create animation with computed values
var stream1_ = animation.comet_animation(engine)
stream1_.color = 0xFFFF0000
stream1_.tail_length = animation.create_closure_value(engine, def (engine) return animation._math.abs(animation.resolve(strip_len_) / 4) end)  # computed value
stream1_.speed = 1.5
stream1_.priority = 10
# More complex computed values
var base_speed_ = 2.0
var stream2_ = animation.comet_animation(engine)
stream2_.color = 0xFF0000FF
stream2_.tail_length = animation.create_closure_value(engine, def (engine) return animation.resolve(strip_len_) / 8 + (2 * animation.resolve(strip_len_)) - 10 end)  # computed with addition
stream2_.speed = animation.create_closure_value(engine, def (engine) return animation.resolve(base_speed_) * 1.5 end)  # computed with multiplication
stream2_.direction = (-1)
stream2_.priority = 5
# Property assignment with computed values
stream1_.tail_length = animation.create_closure_value(engine, def (engine) return animation.resolve(strip_len_) / 5 end)
stream2_.opacity = animation.create_closure_value(engine, def (engine) return animation.resolve(strip_len_) * 4 end)
# Run both animations
engine.add(stream1_)
engine.add(stream2_)
engine.run()


#- Original DSL source:
# Computed Values Demo - Example from the original request
# Shows how to use computed values from value providers

# Get the current strip length
set strip_len = strip_length()

# Create animation with computed values
animation stream1 = comet_animation(
  color=red
  tail_length=abs(strip_len / 4)  # computed value
  speed=1.5
  priority=10
)

# More complex computed values
set base_speed = 2.0
animation stream2 = comet_animation(
  color=blue
  tail_length=strip_len / 8 + (2 * strip_len) -10  # computed with addition
  speed=base_speed * 1.5         # computed with multiplication
  direction=-1
  priority=5
)

# Property assignment with computed values
stream1.tail_length = strip_len / 5
stream2.opacity = strip_len * 4

# Run both animations
run stream1
run stream2
-#
